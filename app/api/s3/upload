import z from 'zod';
import { NextResponse } from 'next/server';
import {PutObjectCommand} from "@aws-sdk/client-s3";
import env from '../../../lib/env';
import { v4 as uuidv4 } from 'uuid';
import {getSignedUrl} from "@aws-sdk/s3-request-presigner"
import { S3 } from '../../../lib/S3Client';
import { error } from 'console';

export const fileUploadSchema = z.object({
    fileName: z.string().min(1, {message: "Filename is required"}),
    contentType: z.string().min(1, {message: "content type is required"}),
    size: z.string().min(1, {message: "Size is required"}),
    isImage: z.boolean(),
});

export async function POST(request: Request) {

    try {
        const body = await request.json();

        const validation = fileUploadSchema.safeParse(body);

        if(!validation.success) {
            return NextResponse.json(
                {error: "Invalid Request Body"}, 
                {status: 400 }
            );
        }

        const { fileName, contentType, size } = validation.data;

        const uniqueKey = `${uuidv4()}-${fileName}`

        const command = new PutObjectCommand({
            Bucket: env.NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES,
            ContentType:  contentType,
            ContentLength: size,
            Key: uniqueKey,
        });
        

        const preSignedUrl = await getSignedUrl(S3,command, {
            expiresIn: 360, //url expires in 6 minutes
        });

        const response = {
            preSignedUrl,
            key: uniqueKey,
        };

        return NextResponse.json(response);
    } catch  {
        return NextResponse.json(
            {error: "Failed to generate presigned URL"},
            {status: 500 }
        );
    }

}