// /app/api/s3/upload/route.ts
import { NextResponse } from 'next/server';
import { PutObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { v4 as uuidv4 } from 'uuid';
import { z } from 'zod';
import { S3 } from '../../../lib/S3Client';
import env from '../../../lib/env';

// Schema validation
const fileUploadSchema = z.object({
  fileName: z.string().min(1, { message: 'Filename is required' }),
  contentType: z.string().min(1, { message: 'Content type is required' }),
  size: z.number().positive({ message: 'Size must be a positive number' }),
  isImage: z.boolean(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();

    const validation = fileUploadSchema.safeParse(body);
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid Request Body', details: validation.error.format() },
        { status: 400 }
      );
    }

    const { fileName, contentType, size } = validation.data;

    const uniqueKey = `${uuidv4()}-${fileName}`;

    const command = new PutObjectCommand({
      Bucket: env.NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES,
      Key: uniqueKey,
      ContentType: contentType,
      ContentLength: size,
    });

    const preSignedUrl = await getSignedUrl(S3, command, { expiresIn: 360 }); // 6 minutes

    return NextResponse.json({ preSignedUrl, key: uniqueKey });
  } catch (err) {
    console.error('Error generating presigned URL:', err);
    return NextResponse.json(
      { error: 'Failed to generate presigned URL' },
      { status: 500 }
    );
  }
}

}